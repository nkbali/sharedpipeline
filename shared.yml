jobs:
  - job: build_test_deploy
    steps:
    - task: Maven@3
      displayName: Maven Compile
      inputs:
       mavenPomFile: 'pom.xml'
       options: -B compile -DskipTests=true
       mavenOptions: '-Xmx3072m'
       javaHomeOption: 'JDKVersion'
       jdkVersionOption: '1.11'
       jdkArchitectureOption: 'x64'
       publishJUnitResults: false

    - task: SonarCloudPrepare@1
      displayName: Prepare Sonar Cloud
      inputs:
       SonarCloud: 'Sonar Cloud'
       organization: 'nkbali'
       scannerMode: 'Other'

    - task: SonarCloudPublish@1
      displayName: Sonar Publish
      inputs:
       pollingTimeoutSec: '300'

    - task: PowerShell@2
      displayName: Check Quality Gate
      inputs:
       targetType: 'inline'
       script: |
         $token="$(SonarToken)"
         $tokenBytes = [Text.Encoding]::Unicode.GetBytes($token)
         $base64 = [System.Convert]::ToBase64String($tokenBytes)
         $basicAuth = [string]::Format("Basic {0}", $base64)
         $result = Invoke-RestMethod -Method Get -Uri https://sonarcloud.io/api/qualitygates/project_status?projectKey=$(SonarProjectKey)
         $result | ConvertTo-Json | Write-Host
         if ($result.projectStatus.status -eq "OK") {
         Write-Host "Quality Gate Succeeded"
         }else{
         throw "Quality gate failed"
         }'
            
    - task: CopyFiles@2
      displayName: Copy Jar File
      inputs:
       SourceFolder: '$(build.sourcesdirectory)'
       Contents: 'target/*.jar'
       TargetFolder: '$(build.artifactstagingdirectory)'

    - task: CopyFiles@2
      displayName: Copy Docker File
      inputs:
       SourceFolder: '$(build.sourcesdirectory)'
       Contents: 'Dockerfile'
       TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'drop'
       publishLocation: 'Container'

    - task: Docker@2
      displayName: Docker Build and Push
      inputs:
       containerRegistry: 'Azure Openshift Docker Registry'
       repository: $(RespositoryName)
       command: 'buildAndPush'
       Dockerfile: 'Dockerfile'
       tags: |
         $(Build.BuildNumber)
         latest
