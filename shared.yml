jobs:
  - job: build_test_deploy
    steps:
    - task: InstallSSHKey@0
      displayName: Install Pantheon Keys
      inputs:
       knownHostsEntry: codeserver.dev.3783ae00-7f04-4d47-9fae-991f1205d3ca.drush.in,35.193.244.251 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSY3gnr0DrbqJJSnEFy6jazDmAdBm4Zs/EkWIQa7x31qgSYyYJMz5V+pk62lBf2BN42VtubwO83vW9G+yG2K1RGOvZJaK5GBvBb/Ws2ZPcp/4sNHpPzkdd75e5/Pk8AWA59XUbJcBWmrDrHMbWV1j2zqPPikxbqGeTTjSx4QR18LIRei5OwT6VQnaVnJqPAqFZ+oCbpr0DL96foL3UEY8EWT/6GH2cANEGZO4ppbhdDw4uG6TaI7S0lxWMQEVy+iwjCNH/nanjd73cwoYd90E0OVdgNDr3hVbIuE6sUW6UwlaAwuyOM/xJYPg1y0rF66958pyVJlZ9KD5A0kY3bHg7
       sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQChiMqmeWflxrKDzuW21LsoEVO728O7e6WMbt89h9CCYnYB1RG+pC1hlqDWaDRMo6FLLJrhZg9V30UNUzApcXzrWfMyOBkMfsw2XMYz/2pKRpWscwIo46DUsFnfXCkEfPwTAkyKmk7wNO5zZwAz21isYFXDh7zV9MX4zaWBQEX8dpehb6amVoLZpHIhP5XGCHoAZhkKojZT2oZZ0ZylxOL1oIfLdNbiKorub1EXNi0vYOIMDqpzlEegfpn015gAzb+E/Sbk05pfoZ6djcHLA/6Z+Q5YtY+R7Kwnp5oG8STGCIGK17MnHvsNMHEc9JqjnlADXJx1XB2VwchtbAWVZUKi+Q12W4sHsXkxmvdw3E6ey2NFHDhVaR2P08vJ9sOcyTO2oGeOUPjEMcP1xRQUtaBATj9Sg+JKOSgzyZwNVj0jGDrUtT1Re7MVuPS4fQQ9NFghByVy3XVxF0gb8gMl8/kKr3V+PPhE6YTHLryP9tVuWKbQMWgPp+PmOt7zotCXOtN0Ykm5+A9aYcEboihPlqHcl8zeFlQVCiL3WpbCHBhe+zdfIYcgmPaG2vqTED3he0lMip2XlGJc7QHTlXU6PtFleMmkRMGCVkLa2q0bU1TjD82q4g7u/+8s/lQsq/7R5x/L/EeTwOVBHUFOSN5fMZyyNeTMMa72y30W+UWzk2Dluw==
       sshKeySecureFile: id_rsa
    - task: Bash@3
      displayName: Clone Pantheon
      inputs:
       targetType: 'inline'
       script: |
        ls -l
        git clone ssh://codeserver.dev.3783ae00-7f04-4d47-9fae-991f1205d3ca@codeserver.dev.3783ae00-7f04-4d47-9fae-991f1205d3ca.drush.in:2222/~/repository.git mtn-prod
        ls -l
    - task: Maven@3
    - task: Maven@3
      displayName: Maven Compile
      inputs:
       mavenPomFile: 'pom.xml'
       options: -B compile -DskipTests=true
       mavenOptions: '-Xmx3072m'
       javaHomeOption: 'JDKVersion'
       jdkVersionOption: '1.11'
       jdkArchitectureOption: 'x64'
       publishJUnitResults: false

    - task: SonarCloudPrepare@1
      displayName: Prepare Sonar Cloud
      inputs:
       SonarCloud: 'Sonar Cloud'
       organization: 'nkbali'
       scannerMode: 'Other'
       
    - task: Maven@3
      displayName: Sonar Analysis
      inputs:
       mavenPomFile: 'pom.xml'
       options: -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
       mavenOptions: '-Xmx3072m'
       javaHomeOption: 'JDKVersion'
       jdkVersionOption: '1.11'
       jdkArchitectureOption: 'x64'
       publishJUnitResults: true
       testResultsFiles: '**/surefire-reports/TEST-*.xml'
       sqAnalysisEnabled: true

    - task: SonarCloudPublish@1
      displayName: Sonar Publish
      inputs:
       pollingTimeoutSec: '300'

    - task: PowerShell@2
      displayName: Check Quality Gate
      inputs:
       targetType: 'inline'
       script: |
         $token="$(SonarToken)"
         $tokenBytes = [Text.Encoding]::Unicode.GetBytes($token)
         $base64 = [System.Convert]::ToBase64String($tokenBytes)
         $basicAuth = [string]::Format("Basic {0}", $base64)
         $result = Invoke-RestMethod -Method Get -Uri https://sonarcloud.io/api/qualitygates/project_status?projectKey=$(SonarProjectKey)
         $result | ConvertTo-Json | Write-Host
         if ($result.projectStatus.status -eq "OK") {
         Write-Host "Quality Gate Succeeded"
         } else {
         throw "Quality gate failed"
         }
            
    - task: CopyFiles@2
      displayName: Copy Jar File
      condition: and(succeeded(), not(contains(variables['Build.SourceBranch'], 'refs/heads/feature')))
      inputs:
       SourceFolder: '$(build.sourcesdirectory)'
       Contents: 'target/*.jar'
       TargetFolder: '$(build.artifactstagingdirectory)'

    - task: CopyFiles@2
      displayName: Copy Docker File
      condition: and(succeeded(), not(contains(variables['Build.SourceBranch'], 'refs/heads/feature')))
      inputs:
       SourceFolder: '$(build.sourcesdirectory)'
       Contents: 'Dockerfile'
       TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: and(succeeded(), not(contains(variables['Build.SourceBranch'], 'refs/heads/feature')))
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'drop'
       publishLocation: 'Container'

    - task: Docker@2
      displayName: Docker Build and Push
      condition: and(succeeded(), not(contains(variables['Build.SourceBranch'], 'refs/heads/feature')))
      inputs:
       containerRegistry: 'Azure Openshift Docker Registry'
       repository: $(RespositoryName)
       command: 'buildAndPush'
       Dockerfile: 'Dockerfile'
       tags: |
         $(Build.BuildNumber)
         latest
